// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.DbMigration.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Breed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Breed");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Byre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BreedId");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("FarmerId");

                    b.Property<string>("Name");

                    b.Property<int?>("QuantityCow");

                    b.Property<string>("Ration");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BreedId");

                    b.HasIndex("FarmerId");

                    b.ToTable("Byre");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Cow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Birthday");

                    b.Property<int>("ByreId");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int?>("FatherId");

                    b.Property<int>("FoodSuggestionId");

                    b.Property<string>("Gender");

                    b.Property<int?>("MotherId");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("Status");

                    b.Property<string>("TinhCode");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<DateTime>("WeaningDate");

                    b.HasKey("Id");

                    b.HasIndex("ByreId");

                    b.HasIndex("FoodSuggestionId");

                    b.ToTable("Cow");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<int>("ProvinceId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("Type");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("Address");

                    b.Property<string>("Bank");

                    b.Property<string>("BankBranch");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("IdentificationNo");

                    b.Property<string>("IssuedBy");

                    b.Property<DateTime>("IssuedOn");

                    b.Property<string>("Name");

                    b.Property<string>("PermissionGroup");

                    b.Property<string>("PhoneNumber");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Farmer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber");

                    b.Property<string>("Address");

                    b.Property<string>("Bank");

                    b.Property<string>("BankBranch");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Code");

                    b.Property<DateTime>("ContractCreatetionDate");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int?>("DistrictId");

                    b.Property<string>("FullName");

                    b.Property<bool>("Gender");

                    b.Property<string>("IdentificationNo");

                    b.Property<bool>("IsBlock");

                    b.Property<string>("IssuedBy");

                    b.Property<DateTime>("IssuedOn");

                    b.Property<int?>("MilkCollectionStationId");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<int?>("ProvinceId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<int?>("UserId");

                    b.Property<int?>("WareHouseId");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("MilkCollectionStationId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.HasIndex("WareHouseId");

                    b.ToTable("Farmer");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Food", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<int>("Provinceid");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("Type");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("Provinceid");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.FoodSuggestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("Content");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("FoodId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.ToTable("FoodSuggestion");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.ImportHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("FoodName");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<int>("WareHouseId");

                    b.HasKey("Id");

                    b.HasIndex("WareHouseId");

                    b.ToTable("ImportHistory");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkCollectionStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("DistrictId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("MilkCollectionStation");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("FarmerId");

                    b.Property<int>("MilkCollectionStationId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("Session");

                    b.Property<int>("StorageTankId");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FarmerId");

                    b.HasIndex("MilkCollectionStationId");

                    b.HasIndex("StorageTankId");

                    b.ToTable("MilkCoupon");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkCouponDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int?>("MilkCouponId");

                    b.Property<string>("MilkQuality");

                    b.Property<int>("Quantity");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("TypeMilk");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MilkCouponId");

                    b.ToTable("MilkCouponDetail");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkingSlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("FarmerId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("Session");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("FarmerId");

                    b.ToTable("MilkingSlip");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkingSlipDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CowId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int?>("MilkingSlipId");

                    b.Property<string>("Note");

                    b.Property<int>("Quantity");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CowId");

                    b.HasIndex("MilkingSlipId");

                    b.ToTable("MilkingSlipDetail");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("Type");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.StorageTank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<int>("MilkCollectionStationId");

                    b.Property<string>("Name");

                    b.Property<int>("Quantity");

                    b.Property<byte[]>("RowVersion");

                    b.Property<string>("TypeMilk");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("MilkCollectionStationId");

                    b.ToTable("StorageTank");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<string>("Code");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("FoodName");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");
                });

            modelBuilder.Entity("ApplicationDomain.Core.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("EmailContent");

                    b.Property<string>("EmailSubject");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplate");
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.FarmerPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("CanAccess");

                    b.Property<bool>("CanCreate");

                    b.Property<bool>("CanDelete");

                    b.Property<bool>("CanEdit");

                    b.Property<bool>("CanView");

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 24, 18, 55, 23, 593, DateTimeKind.Unspecified).AddTicks(1830), new TimeSpan(0, 7, 0, 0, 0)));

                    b.Property<int>("PermissionGroupId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 24, 18, 55, 23, 597, DateTimeKind.Unspecified).AddTicks(7244), new TimeSpan(0, 7, 0, 0, 0)));

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("FarmerPermission");
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.PermissionGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 24, 18, 55, 23, 605, DateTimeKind.Unspecified).AddTicks(6074), new TimeSpan(0, 7, 0, 0, 0)));

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 24, 18, 55, 23, 605, DateTimeKind.Unspecified).AddTicks(6500), new TimeSpan(0, 7, 0, 0, 0)));

                    b.HasKey("Id");

                    b.ToTable("PermissionGroup");
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.PermissionMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 24, 18, 55, 23, 609, DateTimeKind.Unspecified).AddTicks(1669), new TimeSpan(0, 7, 0, 0, 0)));

                    b.Property<int>("PermissionGroupId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName");

                    b.Property<DateTimeOffset>("UpdatedDate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(new DateTimeOffset(new DateTime(2021, 4, 24, 18, 55, 23, 609, DateTimeKind.Unspecified).AddTicks(2044), new TimeSpan(0, 7, 0, 0, 0)));

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionMembership");
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken();

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("AvatarURL");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int>("CreatedByUserId");

                    b.Property<string>("CreatedByUserName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NetResetCode");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ResetCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken();

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("Status");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int>("UpdatedByUserId");

                    b.Property<string>("UpdatedByUserName")
                        .IsRequired();

                    b.Property<DateTimeOffset>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Byre", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Breed", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Cow", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Byre", "Byre")
                        .WithMany()
                        .HasForeignKey("ByreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.FoodSuggestion", "FoodSuggestion")
                        .WithMany()
                        .HasForeignKey("FoodSuggestionId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.District", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Employee", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Farmer", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("ApplicationDomain.BOA.Entities.MilkCollectionStation", "MilkCollectionStation")
                        .WithMany()
                        .HasForeignKey("MilkCollectionStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId");

                    b.HasOne("ApplicationDomain.Identity.Entities.User", "User")
                        .WithOne()
                        .HasForeignKey("ApplicationDomain.BOA.Entities.Farmer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationDomain.BOA.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.Food", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("Provinceid")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.FoodSuggestion", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.ImportHistory", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Warehouse", "WareHouse")
                        .WithMany()
                        .HasForeignKey("WareHouseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkCollectionStation", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkCoupon", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.MilkCollectionStation", "MilkCollectionStation")
                        .WithMany()
                        .HasForeignKey("MilkCollectionStationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.StorageTank", "StorageTank")
                        .WithMany()
                        .HasForeignKey("StorageTankId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkCouponDetail", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.MilkCoupon", "MilkCoupon")
                        .WithMany()
                        .HasForeignKey("MilkCouponId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkingSlip", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Farmer", "Farmer")
                        .WithMany()
                        .HasForeignKey("FarmerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.MilkingSlipDetail", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.Cow", "Cow")
                        .WithMany()
                        .HasForeignKey("CowId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ApplicationDomain.BOA.Entities.MilkingSlip", "MilkingSlip")
                        .WithMany()
                        .HasForeignKey("MilkingSlipId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.BOA.Entities.StorageTank", b =>
                {
                    b.HasOne("ApplicationDomain.BOA.Entities.MilkCollectionStation", "MilkCollectionStation")
                        .WithMany()
                        .HasForeignKey("MilkCollectionStationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.FarmerPermission", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ApplicationDomain.Identity.Entities.PermissionMembership", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.PermissionGroup", "PermissionGroup")
                        .WithMany()
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationDomain.Identity.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationDomain.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("ApplicationDomain.Identity.Entities.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
